name: Upload new docker image on release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            fetch-depth: 0
      - name: Commits to file
        run: |
          echo "In this release:" > ./commits.log
          echo "" >> ./commits.log
          /usr/bin/git log --oneline --no-merges $(/usr/bin/git describe --tags --abbrev=0 ${{ github.ref }}^)..${{ github.ref }} >> ./commits.log
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ./commits.log
          draft: false
          prerelease: false
  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v1
        - name: Login to DockerHub Registry
          run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        - name: Get the version
          id: vars
          run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
        - name: Build the tagged Docker image
          run: docker build . --file .docker/images/spectacles/dockerfile-spectacles --tag ptik/spectacles:${{steps.vars.outputs.tag}}
        - name: Push the tagged Docker image
          run: docker push ptik/spectacles:${{steps.vars.outputs.tag}}
        - name: Build the latest Docker image
          run: docker build . --file .docker/images/spectacles/dockerfile-spectacles --tag ptik/spectacles:latest
        - name: Push the latest Docker image
          run: docker push ptik/spectacles:latest
